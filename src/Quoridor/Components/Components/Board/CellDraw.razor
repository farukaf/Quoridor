@rendermode InteractiveServer
@inject IPlayerService playerService
@code {
    [Parameter] public CellAddress CellAddress { get; set; } = default!;
    [Parameter] public RoomViewModel Room { get; set; } = default!;

    protected CellViewModel Cell => Room.Board.Cells[CellAddress];
    protected string CellName => Cell.ToString();
    protected PlayerViewModel? CellPlayer => Room.GetPlayer(CellAddress);
    private Player? player;
    protected async Task CellClicked()
    {
        player ??= await playerService.GetPlayer();
        if (Cell?.Clicked is not null && player is not null)
            await Cell.Clicked.Invoke(Cell, player);
    }
}

<div class="text-center cell" @onclick="() => CellClicked()">
    @if (Cell.VictoryCondition.PlayerColors.Any())
    {
        <div class="victory-block">
            @foreach (var color in Cell.VictoryCondition.PlayerColors)
            {
                <div class="victory" style="background-color: @ColorHelper.GetHex(color)"></div>
            }
        </div>
    }
    @if (Cell.State == CellState.AvaliableMove)
    {
        <div class="avaliable"></div>
    }
    <small class="d-block">
        @CellName
    </small>
    <PlayerDraw Player="CellPlayer" />
</div>