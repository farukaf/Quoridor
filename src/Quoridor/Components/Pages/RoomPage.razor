@page "/Room/{id:guid}"
@using Quoridor.Components.Components.Board
@attribute [StreamRendering]
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IRoomService roomService
@inject IPlayerService playerService
@inject ILogger<RoomPage> logger

<PageTitle>Room @Id</PageTitle>

@code {
    [Parameter] public Guid Id { get; set; } = default!;

    private bool loading = true;
    protected RoowViewModel? Room { get; set; }
    private Player? player;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await EnterRoom();
        playerService.PlayerChanged += EnterRoom;
    }

    protected async Task EnterRoom()
    {
        try
        {
            Room = roomService.GetRoom(Id);
            player = await playerService.GetPlayer();
            if (player is null)
                return;

            Room.EnterRoom(player);
            loading = false;
            Room.RoomChanged += RoomChanged_Event;
        }
        catch (Exception ex)
        {
            //TODO: Toast this error
            logger.LogError(ex, ex.Message);
            throw;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task RoomChanged_Event()
    {
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        if (Room is null)
            return ValueTask.CompletedTask;

        Room.RoomChanged -= RoomChanged_Event;
        if (player is not null)
            Room.LeaveRoom(player);

        return ValueTask.CompletedTask;
    }
}

<UserBarrier>
    @if (loading)
    {
        <p><em>Loading...</em></p>
    }

    @if (!loading && Room is not null)
    {
        <PlayerBoard Room="Room" />

        <SpectatorBoard Room="Room" />

        <br />

        <div>
            <BoardDraw Room="Room" />
        </div>
    }
</UserBarrier>